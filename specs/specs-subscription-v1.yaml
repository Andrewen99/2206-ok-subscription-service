openapi: 3.0.3
info:
  title: Subscription-service api
  description: Subscription-api
  version: 1.0.0
servers:
  - url: 'http://localhost/v1'
tags:
  - name: subscription
    description: Подписка
paths:
  /subsciprion/create:
    post:
      tags:
        - subscription
      summary: Create Subscription
      operationId: subCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCreateResponse'
  /subscription/update:
    post:
      tags:
        - subscription
      summary: update subscription
      operationId: subUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpdateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionUpdateResponse'
  /subscription/read:
    post:
      tags:
        - subscription
      summary: read subscription
      operationId: subRead
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionReadResponse'
  /subscription/readAll:
    post:
      tags:
        - subscription
      summary: read all subscriptions
      operationId: subReadAll
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionReadAllRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionReadAllResponse'
  /subscription/delete:
    post:
      tags:
        - subscription
      summary: delete subscription
      operationId: subDelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionDeleteResponse'
  /subscription/buy:
    post:
      tags:
        - subscription
      summary: buy subscription
      operationId: subBuy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionBuyRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionBuyResponse'
  /subscription/acquired/search:
    post:
      tags:
        - subscription
      summary: search acquired subscription
      operationId: subSearchAcquired
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionSearchAcquiredRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionSearchAcquiredResponse'

components:
  schemas:

    IRequest:
      type: object
      description: Базовый интерфейс для всех запросов
      properties:
        requestType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/SubscriptionCreateRequest'
          update: '#/components/schemas/SubscriptionUpdateRequest'
          read: '#/components/schemas/SubscriptionReadRequest'
          readAll: '#/components/schemas/SubscriptionReadAllRequest'
          delete: '#/components/schemas/SubscriptionDeleteRequest'
          buy: '#/components/schemas/SubscriptionBuyRequest'
          searchAcquired: '#/components/schemas/SubscriptionSearchAcquiredRequest'

    Error:
      type: object
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string

    ResponseResult:
      type: string
      enum:
        - success
        - error

    IResponse:
      type: object
      description: Базовый интерфейс для всех ответов
      properties:
        responseType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/SubscriptionCreateResponse'
          update: '#/components/schemas/SubscriptionUpdateResponse'
          read: '#/components/schemas/SubscriptionReadResponse'
          readAll: '#/components/schemas/SubscriptionReadAllResponse'
          delete: '#/components/schemas/SubscriptionDeleteResponse'
          buy: '#/components/schemas/SubscriptionBuyResponse'
          searchAcquired: '#/components/schemas/SubscriptionSearchAcquiredResponse'

    UserId:
      type: string
      description: Идентификатор пользователя
    SubscriptionId:
      type: string
      description: Идентификатор подписки
    SubscriptionLock:
      type: string
      description: Версия оптимистичной блокировки
    AcquiredSubscriptionId:
      type: string
      description: Идентификатор приобретенной подписки

    FromToDateObject:
      type: object
      description: Объект хранящий 2 даты from и to
      properties:
        from:
          description: Дата начала периода в формате дд.мм.гггг
          #pattern: '^((0[1-9])|([1-2]\d)|(3[0-1]))\.((0[1-9])|(1[0-2]))\.2\d{3}$'
          type: string
        to:
          description: Дата окончания периода в формате дд.мм.гггг
          #pattern: '^((0[1-9])|([1-2]\d)|(3[0-1]))\.((0[1-9])|(1[0-2]))\.2\d{3}$'
          type: string

    BaseSubscription:
      type: object
      description: Объект описывает свойства, одинаковые для create и update
      properties:
        title:
          type: string
          description: Название подписки
        conditions:
          type: array
          uniqueItems: true
          description: Условия подписки
          items:
            type: string
        duration:
          type: integer
          description: Продолжительность подписки (в месяцах)
        price:
          type: string
          description: Цена подписки в ₽
          #pattern: '^\d+(,\d{1,2})?$'
        visibility:
          $ref: '#/components/schemas/SubscriptionVisibility'


    SubscriptionVisibility:
      type: string
      description: 'Тип видимости подписки. Возможные значения: видит только администратор, видимо всем'
      enum:
        - adminOnly
        - public


    ### Requests


    SubscriptionCreateObject:
      allOf:
        - $ref: '#/components/schemas/BaseSubscription'

    SubscriptionCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/SubscriptionRequestDebug'
        - type: object
          properties:
            subscription:
              $ref: '#/components/schemas/SubscriptionCreateObject'

    SubscriptionUpdateObject:
      allOf:
        - $ref: '#/components/schemas/BaseSubscription'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/BaseSubscription'
            lock:
              $ref: '#/components/schemas/SubscriptionLock'

    SubscriptionUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/SubscriptionRequestDebug'
        - type: object
          properties:
            ad:
              $ref: '#/components/schemas/SubscriptionUpdateObject'

    SubscriptionReadObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/SubscriptionId'

    SubscriptionReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/SubscriptionRequestDebug'
        - type: object
          properties:
            subscription:
              $ref: '#/components/schemas/SubscriptionReadObject'

    SubscriptionReadAllRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/SubscriptionRequestDebug'
        - type: object

    SubscriptionDeleteObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/SubscriptionId'

    SubscriptionDeleteRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/SubscriptionRequestDebug'
        - type: object
          properties:
            subscription:
              $ref: '#/components/schemas/SubscriptionDeleteObject'

    SubscriptionBuyObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/SubscriptionId'

    SubscriptionBuyRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/SubscriptionRequestDebug'
        - type: object
          properties:
            subscription:
              $ref: '#/components/schemas/SubscriptionBuyObject'

    SubscriptionSearchAcquiredFilter:
      type: object
      description: Набор фильтров для поиска
      properties:
        ownerId:
          $ref: '#/components/schemas/UserId'
        boughtPeriod:
          $ref: '#/components/schemas/FromToDateObject'
        expirationPeriod:
          $ref: '#/components/schemas/FromToDateObject'
        isActive:
          type: boolean
          description: Флаг активности подписки

    SubscriptionSearchAcquiredRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/SubscriptionRequestDebug'
        - type: object
          properties:
            subscription:
              $ref: '#/components/schemas/SubscriptionSearchAcquiredFilter'

    ### Responses

    SubscriptionResponseObject:
      allOf:
        - $ref: '#/components/schemas/BaseSubscription'
        - type: object
          description: Объект, возвращаемый в ответе от бэкенда
          properties:
            id:
              $ref: '#/components/schemas/SubscriptionId'
            lock:
              $ref: '#/components/schemas/SubscriptionLock'

    AcquiredSubscriptionResponseObject:
      type: object
      description: Объект приобретенной подписки
      properties:
        id:
          $ref: '#/components/schemas/AcquiredSubscriptionId'
        subscriptionId:
          $ref: '#/components/schemas/SubscriptionId'
        startDate:
          description: Дата приобретения/включения подписки в формате дд.мм.гггг
          type: string
          #pattern: '^((0[1-9])|([1-2]\d)|(3[0-1]))\.((0[1-9])|(1[0-2]))\.2\d{3}$'
        endDate:
          description: Дата окончания подписки (включительно) в формате дд.мм.гггг
          type: string
          #pattern: '^((0[1-9])|([1-2]\d)|(3[0-1]))\.((0[1-9])|(1[0-2]))\.2\d{3}$'
        isActive:
          description: Флаг активности подписки
          type: boolean

    SubscriptionResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом объявления
          properties:
            subscription:
              $ref: '#/components/schemas/SubscriptionResponseObject'

    SubscriptionResponseMulti:
      allOf:
        - type: object
          description: Список найденных объектов
          properties:
            subscriptions:
              type: array
              items:
                $ref: '#/components/schemas/SubscriptionResponseObject'

    AcquiredSubscriptionResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом объявления
          properties:
            ad:
              $ref: '#/components/schemas/AcquiredSubscriptionResponseObject'

    AcquiredSubscriptionResponseMulti:
      allOf:
        - type: object
          description: Список найденных объектов
          properties:
            ads:
              type: array
              items:
                $ref: '#/components/schemas/AcquiredSubscriptionResponseObject'

    SubscriptionCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/SubscriptionResponseSingle'

    SubscriptionUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/SubscriptionResponseSingle'

    SubscriptionReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/SubscriptionResponseSingle'

    SubscriptionReadAllResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/SubscriptionResponseMulti'

    SubscriptionDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/SubscriptionResponseSingle'

    SubscriptionBuyResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/AcquiredSubscriptionResponseSingle'

    SubscriptionSearchAcquiredResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/AcquiredSubscriptionResponseMulti'

    ### STUBS AND DEBUG


    SubscriptionRequestDebugMode:
      type: string
      enum:
        - prod
        - test
        - stub

    SubscriptionRequestDebug:
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/SubscriptionDebug'

    SubscriptionDebug:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/SubscriptionRequestDebugMode'
        stub:
          $ref: '#/components/schemas/SubscriptionRequestDebugStubs'

    SubscriptionRequestDebugStubs:
      type: string
      description: Перечисления всех стабов
      enum:
        - success
        - notFound
        - badId
        - badTitle
        - badDescription
        - badVisibility
        - cannotDelete
        - badSearchString